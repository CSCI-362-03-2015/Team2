from lxml import html
from urllib import url2pathname
import requests
import os

# will need to find a way to get the info from the generated qunit page. 
# requests.get will only accept "http://" as the input for the url, or it throws an error.



# local file support?
class LocalFileAdapter(requests.adapters.BaseAdapter):
    """Protocol Adapter to allow Requests to GET file:// URLs

    @todo: Properly handle non-empty hostname portions.
    """

    @staticmethod
    def _chkpath(method, path):
        """Return an HTTP status for the given filesystem path."""
        if method.lower() in ('put', 'delete'):
            return 501, "Not Implemented"  # TODO
        elif method.lower() not in ('get', 'head'):
            return 405, "Method Not Allowed"
        elif os.path.isdir(path):
            return 400, "Path Not A File"
        elif not os.path.isfile(path):
            return 404, "File Not Found"
        elif not os.access(path, os.R_OK):
            return 403, "Access Denied"
        else:
            return 200, "OK"

    def send(self, req, **kwargs):  # pylint: disable=unused-argument
        """Return the file specified by the given request

        @type req: C{PreparedRequest}
        @todo: Should I bother filling `response.headers` and processing
               If-Modified-Since and friends using `os.stat`?
        """
        path = os.path.normcase(os.path.normpath(url2pathname(req.path_url)))
        response = requests.Response()

        response.status_code, response.reason = self._chkpath(req.method, path)
        if response.status_code == 200 and req.method.lower() != 'head':
            try:
                response.raw = open(path, 'rb')
            except (OSError, IOError), err:
                response.status_code = 500
                response.reason = str(err)

        if isinstance(req.url, bytes):
            response.url = req.url.decode('utf-8')
        else:
            response.url = req.url

        response.request = req
        response.connection = self

        return response

    def close(self):
        pass



requests_session = requests.session()
requests_session.mount('file://', LocalFileAdapter())
page = requests_session.get('file:///<PATH>/TeamToo/TestAutomation/opt/qunit-example.html')
# comment out above line and uncomment the 'page' line below
# /local file support?


###################################################################################################################
# apparently this becomes useless because the "html file" launched and running in the web browser is not
# the same as the html file in the local directory. If the qunit "web version" can be saved after running, 
# then this script should pull all the info directly from it without issue.
# Replace <PATH> with path to the folder
###################################################################################################################


# Made a sample:
# page = requests.get('https://raw.githubusercontent.com/ChampagneAndOJ/Test_Ignore/master/example.html')
tree = html.fromstring(page.content)

#This will create a list called PassFail:
PassFail = tree.xpath('//span[@class="test-message"]/text()')

print 'Pass or Fail?: ', PassFail
